generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String?    @unique
  name               String?    
  username           String?    @unique
  profileImage         String?
  password           String?
  googleId           String?    @unique
  is_emailVerified   Boolean    @default(false)
  companyName        String?
  phoneNumber        String?
  address            String?
  licenseNumber      String?
  tradeSpecialization String?
  portfolios         Portfolio[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  paymentIntents PaymentIntent[]
  subscription Subscription[]
  stripeCustomerId  String?
}

model Subscription {
  id             String   @id @default(uuid())
  userId         String
  stripeCustomerId String
  stripeSubId    String   @unique
  priceId        String     
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model VerifyUser {
  id                String   @id @default(uuid())
  username          String   @unique
  otp               String
  usernameType      String
  verificationTries Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  is_Active  Boolean @default(true)
  is_Deleted Boolean @default(false)

  @@map(name: "verifyUser")
}

model Portfolio {
  id           String   @id @default(uuid())
  userId       String
  htmlContent  String   // Keep for backward compatibility
  projectData  String?  // Complete GrapesJS project data (JSON)
  pagesData    String?  // Individual pages HTML data (JSON)
  name         String?
  published    Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

model PaymentIntent {
  id        String   @id @default(uuid())
  intentId  String   @unique
  userId    String
  amount    Int
  currency  String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
